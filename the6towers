#!/usr/bin/env python3

import abc

import pygame

# game refers to the game state. state refers to the entire program state.

# 60 frame/s
FPS = 60


class GameObject(abc.ABC):
    """An object in the game world."""
    __slots__ = ()

    # This method might not make sense in a turn-based game.
    @abc.abstractmethod
    def update(self):
        """Mutate the object as needed for one frame of game time."""

    @abc.abstractmethod
    def draw(self, surface):
        """Draw the object where it needs to be on surface."""


class GameState(GameObject):
    """Contains all data relating to the rules of the game."""
    __slots__ = ()

    def update(self):
        pass

    def draw(self, surface):
        """Draw the background and all the game objects."""


class State:
    """Contains most of the program state.

    Includes the game state, user interface stuff, and anything else that needs
    to be displayed to the user.
    """
    __slots__ = 'exit', 'game', 'surface'

    def __init__(self, surface):
        # Main display surface
        self.surface = surface
        # Game state
        self.game = None
        # If True, it's time to exit.
        self.exit = False


def do_events(state):
    """Look at all events and modify state accordingly."""
    for event in pygame.event.get():
        # To exit the game, hit Esc or close the window.
        if (event.type is pygame.QUIT
            or event.type is pygame.KEYDOWN and event.key is pygame.K_ESCAPE
        ):
            state.exit = True


def main():
    clock = pygame.time.Clock()
    # 4:3 aspect ratio
    state = State(pygame.display.set_mode((1332, 999)))
    while not state.exit:
        clock.tick(FPS)
        do_events(state)
        pygame.display.update()


pygame.init()
if __name__ == '__main__':
    main()
