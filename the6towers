#!/usr/bin/env python3

import abc
from dataclasses import dataclass
import enum
import itertools

import pygame

# game refers to the game state. state refers to the entire program state.

# We use a hex grid. Dimensions are odd so we can put the base in the middle.

MAGIC_NUMBER = 6

# Both the x and y coordinate of the base. Enemy sources are this many hexes
# away from the base.
BASE_PLACE = 5
# Width and height of the field, in cells.
FIELD_SIZE = BASE_PLACE * 2 + 1

# 60 frame/s
FPS = 60

GRAY = 128, 128, 128
WHITE = 255, 255, 255

pygame.init()


def is_hi_column(n):
    """Return True if n has the same even/odd status as BASE_PLACE.

    Use this for placing the hex columns properly.
    """
    return n % 2 == BASE_PLACE % 2


class GameObject(abc.ABC):
    """An object in the game world."""
    __slots__ = ()

    # This method might not make sense in a turn-based game.
    @abc.abstractmethod
    def update(self):
        """Mutate the object as needed for one frame of game time."""

    @abc.abstractmethod
    def draw(self, surface):
        """Draw the object where it needs to be on surface."""


@dataclass
class Cell(GameObject):
    __slots__ = 'x', 'y'

    x: int
    y: int

    # Size of a cell in pixels.
    SIZE = 64

    @property
    def rect(self):
        """Return the rectangle for this cell."""
        return pygame.Rect(
            (
                self.x * self.SIZE,
                self.y * self.SIZE
                + (0 if is_hi_column(self.x) else self.SIZE // 2),
            ),
            (self.SIZE, self.SIZE),
        )

    def update(self):
        pass

    def draw(self, surface):
        """Draw the cell as a green square with a transparent white border."""
        pygame.draw.rect(surface, (0, 100, 0), self.rect)
        pygame.draw.rect(surface, (0, 255, 0), self.rect, 1)


# We'll use this until we find a need for more than one font.
FONT = pygame.font.Font(pygame.font.get_default_font(), Cell.SIZE // 4)


def column_cells(x):
    """Iterate through all cells in column y."""
    from_middle = abs(x - BASE_PLACE)
    return (
        Cell(x, y)
        for y in range(from_middle // 2, FIELD_SIZE - (from_middle + 1) // 2)
    )


def all_cells():
    """Iterate through all cells within the field hexagon."""
    return itertools.chain.from_iterable(
        column_cells(x) for x in range(FIELD_SIZE)
    )


class GameState(GameObject):
    """Contains all data relating to the rules of the game."""
    __slots__ = 'base'

    def __init__(self):
        self.base = Base()

    def update(self):
        pass

    def draw(self, surface):
        """Draw the background and all the game objects."""
        for c in all_cells():
            c.draw(surface)
        self.base.draw(surface)


class State:
    """Contains most of the program state.

    Includes the game state, user interface stuff, and anything else that needs
    to be displayed to the user.
    """
    __slots__ = 'exit', 'game', 'window'

    def __init__(self, window):
        # Main display surface
        self.window = window
        # Game state
        self.game = GameState()
        # If True, it's time to exit.
        self.exit = False

    def draw(self):
        """Draw the main window."""
        self.window.fill((0, 0, 0))
        self.game.draw(self.window)


class Element(enum.IntEnum):
    """This class represents the 6 elements of the game.

    One of the elements is 0, so we can use '%' with this type. That value is
    not special, and is considered truthy, like any other object.
    """
    DARK = enum.auto()
    LIGHT = enum.auto()
    EARTH = enum.auto()
    AIR = enum.auto()
    WATER = enum.auto()
    FIRE = enum.auto()

    def _generate_next_value_(name, start, count, last_values):
        """Start the values at 0, not 1."""
        return count

    def __bool__(self):
        return True

    def multiplier(self, target):
        """The damage adjustment for when a unit of this element attacks a unit
        of the target element. It ranges from 1 to 2, inclusive.
        """
        return (self - target) % MAGIC_NUMBER / (MAGIC_NUMBER - 1) + 1

    @property
    def color(self):
        """The color that corresponds to this element."""
        return ELEMENT_COLORS[self]


ELEMENT_COLORS = {
    # Black
    Element.DARK: (0, 0, 0),
    # White
    Element.LIGHT: (255, 255, 255),
    # Brown
    Element.EARTH: (150, 75, 0),
    # Yellow
    Element.AIR: (255, 255, 0),
    # Blue
    Element.WATER: (0, 0, 255),
    # Red
    Element.FIRE: (255, 0, 0),
}


@dataclass
class Base(GameObject):
    """The player's base in the middle of the screen."""
    hp: int = 10

    def draw(self, surface):
        rect = Cell(BASE_PLACE, BASE_PLACE).rect
        side = Cell.SIZE
        half = side // 2
        pygame.draw.polygon(
            surface,
            GRAY,
            (
                (half + rect.x, rect.y),
                (side + rect.x, half + rect.y),
                (half + rect.x, side + rect.y),
                (rect.x, half + rect.y),
            ),
        )
        surface.blit(FONT.render(str(self.hp), True, WHITE), rect)

    def update(self):
        pass


@dataclass
class Source(GameObject):
    """A location that enemies come from.

    It has an element and a position. Its position should be at one vertex of
    the field.
    """
    __slots__ = 'element', 'cell'

    def __init__(self, element, cell):
        self.element = element
        self.cell = Cell(*cell)

    def update(self):
        pass

    def draw(self, surface):
        rect = self.cell.rect
        pygame.draw.polygon(
            surface,
            self.element.color,
            (rect.midtop, rect.bottomright, rect.bottomleft),
        )


SOURCE_PLACES = (
    (BASE_PLACE, 0),
    (FIELD_SIZE - 1, BASE_PLACE // 2),
    (FIELD_SIZE - 1, BASE_PLACE * 3 // 2),
    (BASE_PLACE, FIELD_SIZE - 1),
    (0, BASE_PLACE * 3 // 2),
    (0, BASE_PLACE // 2),
)
SOURCES = tuple(Source(e, c) for e, c in zip(Element, SOURCE_PLACES))

def do_events(state):
    """Look at all events and modify state accordingly."""
    for event in pygame.event.get():
        # To exit the game, hit Esc or close the window.
        if (event.type is pygame.QUIT
            or event.type is pygame.KEYDOWN and event.key is pygame.K_ESCAPE
        ):
            state.exit = True


def main():
    clock = pygame.time.Clock()
    state = State(
        pygame.display.set_mode(
            (Cell.SIZE * FIELD_SIZE, Cell.SIZE * FIELD_SIZE),
        ),
    )
    while not state.exit:
        clock.tick(FPS)
        do_events(state)

        # Draw the window.
        state.draw()
        for s in SOURCES:
            s.draw(state.window)
        pygame.display.update()


if __name__ == '__main__':
    main()
